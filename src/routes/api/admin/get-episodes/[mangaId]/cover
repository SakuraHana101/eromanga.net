// src/routes/api/admin/get-manga/[mangaId]/+server.ts
import { json } from '@sveltejs/kit';
import { S3Client, ListObjectsV2Command } from '@aws-sdk/client-s3';

const r2 = new S3Client({
  region: 'auto',
  endpoint: `https://${process.env.R2_ACCOUNT_ID}.r2.cloudflarestorage.com`,
  credentials: {
    accessKeyId: process.env.R2_ACCESS_KEY!,
    secretAccessKey: process.env.R2_SECRET_KEY!
  }
});

export async function GET({ params }) {
  const { mangaId } = params;
  const bucket = process.env.R2_BUCKET_NAME!;
  const baseUrl = process.env.R2_PUBLIC_URL!; // ตัวอย่าง: https://xxxx.r2.cloudflarestorage.com/manga-images

  const prefix = `manga/${mangaId}/`; // โฟลเดอร์ใน bucket เช่น manga/f82a1229-.../

  try {
    // ดึงชื่อไฟล์ทั้งหมดในโฟลเดอร์
    const command = new ListObjectsV2Command({
      Bucket: bucket,
      Prefix: prefix,
      Delimiter: '/'
    });

    const data = await r2.send(command);

    if (!data.Contents || data.Contents.length === 0) {
      return json({ error: 'ไม่พบภาพในโฟลเดอร์นี้' }, { status: 404 });
    }

    // แยกชื่อไฟล์
    const fileNames = data.Contents
      .map(item => item.Key)
      .filter(key => key && key !== prefix) as string[];

    // หาไฟล์ภาพปกที่มีคำว่า cover ในชื่อ (ถ้ามี)
    const coverFile = fileNames.find(name => name.toLowerCase().includes('cover')) || '';

    // หาไฟล์ภาพหน้ามังงะ เรียงลำดับ เช่น page-1.jpg, page-2.jpg
    const pageFiles = fileNames
      .filter(name => name.toLowerCase().includes('page'))
      .sort();

    // สร้าง URL เต็มสำหรับภาพปกและภาพหน้า
    const coverUrl = coverFile ? `${baseUrl}/${coverFile}` : '';
    const pageUrls = pageFiles.map(name => `${baseUrl}/${name}`);

    // สมมติยังไม่มีฐานข้อมูลเก็บ title, กำหนดชื่อเรื่องตาม mangaId
    const title = `มังงะเรื่อง ${mangaId}`;

    return json({
      title,
      coverUrl,
      pageUrls
    });
  } catch (error) {
    console.error('❌ Error fetching manga from R2:', error);
    return json({ error: 'เกิดข้อผิดพลาดในการดึงข้อมูลมังงะ' }, { status: 500 });
  }
}
